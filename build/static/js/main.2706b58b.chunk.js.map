{"version":3,"sources":["components/Controls/index.js","components/Scene/Lights/index.js","components/Scene/Terrain/index.js","components/Scene/index.js","index.js","components/Scene/Terrain/perlin.js"],"names":["extend","OrbitControls","Controls","props","ref","useRef","_useThree","useThree","camera","domElement","gl","useFrame","current","update","React","createElement","Object","assign","args","FakeSphere","attach","color","_useResource","useResource","_useResource2","_slicedToArray","pLight1","_useResource3","_useResource4","ref2","pLight2","_useResource5","_useResource6","ref3","pLight3","_useResource7","_useResource8","ref4","pLight4","position","intensity","Terrain","mesh","useUpdate","_ref","geometry","console","log","noise","seed","Math","random","pos","getAttribute","pa","array","hVerts","parameters","heightSegments","wVerts","widthSegments","j","i","simplex2","pow","needsUpdate","rotation","z","PI","specular","shininess","smoothShading","Scene","Fragment","Lights","App","Canvas","zoom","Suspense","fallback","Dom","center","className","children","root","document","getElementById","ReactDOM","render","global","module","Grad","x","y","this","prototype","dot2","dot3","grad3","p","perm","Array","gradP","floor","v","F2","sqrt","G2","G3","fade","t","lerp","a","b","xin","yin","i1","j1","s","x0","y0","x1","y1","x2","y2","gi0","gi1","gi2","t0","t1","t2","simplex3","zin","k1","i2","j2","k2","k","z0","z1","z2","x3","y3","z3","gi3","t3","perlin2","X","Y","n00","n01","n10","n11","u","perlin3","Z","n000","n001","n010","n011","n100","n101","n110","n111","w"],"mappings":"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","file":"static/js/main.2706b58b.chunk.js","sourcesContent":["import React, { useRef } from \"react\";\nimport { extend, useFrame, useThree } from \"react-three-fiber\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\n\nextend({ OrbitControls });\n\nconst Controls = props => {\n  const ref = useRef();\n  const {\n    camera,\n    gl: { domElement }\n  } = useThree();\n  useFrame(() => ref.current && ref.current.update());\n  return <orbitControls ref={ref} args={[camera, domElement]} {...props} />;\n};\n\nexport default Controls;\n","import React from \"react\";\nimport { useResource } from \"react-three-fiber\";\n\nexport default () => {\n  const FakeSphere = () => (\n    <mesh>\n      <sphereBufferGeometry attach=\"geometry\" args={[0.001, 50, 50]} />\n      <meshBasicMaterial attach=\"material\" color={0xfff1ef} />\n    </mesh>\n  );\n\n  const [ref, pLight1] = useResource();\n  const [ref2, pLight2] = useResource();\n  const [ref3, pLight3] = useResource();\n  const [ref4, pLight4] = useResource();\n\n  return (\n    <group>\n      <FakeSphere />\n      <ambientLight ref={ref2} position={[0, 4, 0]} intensity={0.3} />\n\n      <directionalLight intensity={0.5} position={[0, 0, 0]} color={0xffffff} />\n\n      <pointLight\n        ref={ref}\n        intensity={0.25}\n        position={[-5, 4, -5]}\n        color={0xffbe0b}\n      >\n        {pLight1 && <pointLightHelper args={[pLight1]} />}\n      </pointLight>\n\n      <pointLight\n        ref={ref2}\n        intensity={0.25}\n        position={[5, 4, 5]}\n        color={0xffbe0b}\n      >\n        {pLight2 && <pointLightHelper args={[pLight2]} />}\n      </pointLight>\n\n      <pointLight\n        ref={ref3}\n        intensity={1}\n        position={[-5, 5, 5]}\n        color={0xffbe0b}\n      >\n        {pLight3 && <pointLightHelper args={[pLight3]} />}\n      </pointLight>\n\n      <pointLight\n        ref={ref4}\n        intensity={1}\n        position={[5, 5, -5]}\n        color={0xffbe0b}\n      >\n        {pLight4 && <pointLightHelper args={[pLight4]} />}\n      </pointLight>\n    </group>\n  );\n};\n","import React from \"react\";\nimport { useFrame, useUpdate } from \"react-three-fiber\";\n\nimport { noise } from \"./perlin\";\n\nconst Terrain = () => {\n  const mesh = useUpdate(({ geometry }) => {\n      console.log(geometry);\n    noise.seed(Math.random());\n    let pos = geometry.getAttribute(\"position\");\n    let pa = pos.array;\n    const hVerts = geometry.parameters.heightSegments + 1;\n    const wVerts = geometry.parameters.widthSegments + 1;\n    for (let j = 0; j < hVerts; j++) {\n      for (let i = 0; i < wVerts; i++) {\n        const ex = 1.2;\n        pa[3 * (j * wVerts + i) + 2] =\n          (noise.simplex2(i / 100, j / 100) +\n            noise.simplex2((i + 200) / 50, j / 50) * Math.pow(ex, 1) +\n            noise.simplex2((i + 400) / 25, j / 25) * Math.pow(ex, 2) +\n            noise.simplex2((i + 600) / 12.5, j / 12.5) * Math.pow(ex, 3) +\n            +(noise.simplex2((i + 800) / 6.25, j / 6.25) * Math.pow(ex, 4))) /\n          2;\n      }\n    }\n\n    pos.needsUpdate = true;\n  });\n\n  // Raf loop\n  useFrame(() => {\n    mesh.current.rotation.z += 0.001;\n  });\n\n  return (\n    <mesh ref={mesh} rotation={[-Math.PI / 2, 0, 0]}>\n      <planeBufferGeometry attach=\"geometry\" args={[25, 25, 75, 75]} />\n      <meshPhongMaterial\n        attach=\"material\"\n        color={\"blue\"}\n        specular={\"hotpink\"}\n        shininess={4}\n        smoothShading\n      />\n    </mesh>\n  );\n};\n\nexport default Terrain;\n","import React from \"react\";\nimport Lights from './Lights';\nimport Terrain from \"./Terrain\";\n\nconst Scene = () => (\n  <>\n    <Lights />\n    <Terrain />\n  </>\n);\n\nexport default Scene;\n","import React, { Suspense } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Canvas, Dom } from \"react-three-fiber\";\nimport \"./index.css\";\n\nimport Controls from \"./components/Controls\";\nimport Scene from './components/Scene';\n\nfunction App() {\n  return (\n      <Canvas camera={{ zoom: 40, position: [0, 0, 500] }}>\n        <Suspense\n          fallback={<Dom center className=\"loading\" children=\"Loading...\" />}\n        >\n          <Controls />\n          <Scene />\n        </Suspense>\n      </Canvas>\n  );\n}\n\nconst root = document.getElementById(\"root\");\nReactDOM.render(<App />, root);","/*\n * A speed-improved perlin and simplex noise algorithms for 2D.\n *\n * Based on example code by Stefan Gustavson (stegu@itn.liu.se).\n * Optimisations by Peter Eastman (peastman@drizzle.stanford.edu).\n * Better rank ordering method by Stefan Gustavson in 2012.\n * Converted to Javascript by Joseph Gentle.\n *\n * Version 2012-03-09\n *\n * This code was placed in the public domain by its original author,\n * Stefan Gustavson. You may use it as you see fit, but\n * attribution is appreciated.\n *\n */\n\n(function(global) {\n    var module = (global.noise = {});\n  \n    function Grad(x, y, z) {\n      this.x = x;\n      this.y = y;\n      this.z = z;\n    }\n  \n    Grad.prototype.dot2 = function(x, y) {\n      return this.x * x + this.y * y;\n    };\n  \n    Grad.prototype.dot3 = function(x, y, z) {\n      return this.x * x + this.y * y + this.z * z;\n    };\n  \n    var grad3 = [\n      new Grad(1, 1, 0),\n      new Grad(-1, 1, 0),\n      new Grad(1, -1, 0),\n      new Grad(-1, -1, 0),\n      new Grad(1, 0, 1),\n      new Grad(-1, 0, 1),\n      new Grad(1, 0, -1),\n      new Grad(-1, 0, -1),\n      new Grad(0, 1, 1),\n      new Grad(0, -1, 1),\n      new Grad(0, 1, -1),\n      new Grad(0, -1, -1)\n    ];\n  \n    var p = [\n      151,\n      160,\n      137,\n      91,\n      90,\n      15,\n      131,\n      13,\n      201,\n      95,\n      96,\n      53,\n      194,\n      233,\n      7,\n      225,\n      140,\n      36,\n      103,\n      30,\n      69,\n      142,\n      8,\n      99,\n      37,\n      240,\n      21,\n      10,\n      23,\n      190,\n      6,\n      148,\n      247,\n      120,\n      234,\n      75,\n      0,\n      26,\n      197,\n      62,\n      94,\n      252,\n      219,\n      203,\n      117,\n      35,\n      11,\n      32,\n      57,\n      177,\n      33,\n      88,\n      237,\n      149,\n      56,\n      87,\n      174,\n      20,\n      125,\n      136,\n      171,\n      168,\n      68,\n      175,\n      74,\n      165,\n      71,\n      134,\n      139,\n      48,\n      27,\n      166,\n      77,\n      146,\n      158,\n      231,\n      83,\n      111,\n      229,\n      122,\n      60,\n      211,\n      133,\n      230,\n      220,\n      105,\n      92,\n      41,\n      55,\n      46,\n      245,\n      40,\n      244,\n      102,\n      143,\n      54,\n      65,\n      25,\n      63,\n      161,\n      1,\n      216,\n      80,\n      73,\n      209,\n      76,\n      132,\n      187,\n      208,\n      89,\n      18,\n      169,\n      200,\n      196,\n      135,\n      130,\n      116,\n      188,\n      159,\n      86,\n      164,\n      100,\n      109,\n      198,\n      173,\n      186,\n      3,\n      64,\n      52,\n      217,\n      226,\n      250,\n      124,\n      123,\n      5,\n      202,\n      38,\n      147,\n      118,\n      126,\n      255,\n      82,\n      85,\n      212,\n      207,\n      206,\n      59,\n      227,\n      47,\n      16,\n      58,\n      17,\n      182,\n      189,\n      28,\n      42,\n      223,\n      183,\n      170,\n      213,\n      119,\n      248,\n      152,\n      2,\n      44,\n      154,\n      163,\n      70,\n      221,\n      153,\n      101,\n      155,\n      167,\n      43,\n      172,\n      9,\n      129,\n      22,\n      39,\n      253,\n      19,\n      98,\n      108,\n      110,\n      79,\n      113,\n      224,\n      232,\n      178,\n      185,\n      112,\n      104,\n      218,\n      246,\n      97,\n      228,\n      251,\n      34,\n      242,\n      193,\n      238,\n      210,\n      144,\n      12,\n      191,\n      179,\n      162,\n      241,\n      81,\n      51,\n      145,\n      235,\n      249,\n      14,\n      239,\n      107,\n      49,\n      192,\n      214,\n      31,\n      181,\n      199,\n      106,\n      157,\n      184,\n      84,\n      204,\n      176,\n      115,\n      121,\n      50,\n      45,\n      127,\n      4,\n      150,\n      254,\n      138,\n      236,\n      205,\n      93,\n      222,\n      114,\n      67,\n      29,\n      24,\n      72,\n      243,\n      141,\n      128,\n      195,\n      78,\n      66,\n      215,\n      61,\n      156,\n      180\n    ];\n    // To remove the need for index wrapping, double the permutation table length\n    var perm = new Array(512);\n    var gradP = new Array(512);\n  \n    // This isn't a very good seeding function, but it works ok. It supports 2^16\n    // different seed values. Write something better if you need more seeds.\n    module.seed = function(seed) {\n      if (seed > 0 && seed < 1) {\n        // Scale the seed out\n        seed *= 65536;\n      }\n  \n      seed = Math.floor(seed);\n      if (seed < 256) {\n        seed |= seed << 8;\n      }\n  \n      for (var i = 0; i < 256; i++) {\n        var v;\n        if (i & 1) {\n          v = p[i] ^ (seed & 255);\n        } else {\n          v = p[i] ^ ((seed >> 8) & 255);\n        }\n  \n        perm[i] = perm[i + 256] = v;\n        gradP[i] = gradP[i + 256] = grad3[v % 12];\n      }\n    };\n  \n    module.seed(0);\n  \n    /*\n      for(var i=0; i<256; i++) {\n        perm[i] = perm[i + 256] = p[i];\n        gradP[i] = gradP[i + 256] = grad3[perm[i] % 12];\n      }*/\n  \n    // Skewing and unskewing factors for 2, 3, and 4 dimensions\n    var F2 = 0.5 * (Math.sqrt(3) - 1);\n    var G2 = (3 - Math.sqrt(3)) / 6;\n  \n    var F3 = 1 / 3;\n    var G3 = 1 / 6;\n  \n    // 2D simplex noise\n    module.simplex2 = function(xin, yin) {\n      var n0, n1, n2; // Noise contributions from the three corners\n      // Skew the input space to determine which simplex cell we're in\n      var s = (xin + yin) * F2; // Hairy factor for 2D\n      var i = Math.floor(xin + s);\n      var j = Math.floor(yin + s);\n      var t = (i + j) * G2;\n      var x0 = xin - i + t; // The x,y distances from the cell origin, unskewed.\n      var y0 = yin - j + t;\n      // For the 2D case, the simplex shape is an equilateral triangle.\n      // Determine which simplex we are in.\n      var i1, j1; // Offsets for second (middle) corner of simplex in (i,j) coords\n      if (x0 > y0) {\n        // lower triangle, XY order: (0,0)->(1,0)->(1,1)\n        i1 = 1;\n        j1 = 0;\n      } else {\n        // upper triangle, YX order: (0,0)->(0,1)->(1,1)\n        i1 = 0;\n        j1 = 1;\n      }\n      // A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and\n      // a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where\n      // c = (3-sqrt(3))/6\n      var x1 = x0 - i1 + G2; // Offsets for middle corner in (x,y) unskewed coords\n      var y1 = y0 - j1 + G2;\n      var x2 = x0 - 1 + 2 * G2; // Offsets for last corner in (x,y) unskewed coords\n      var y2 = y0 - 1 + 2 * G2;\n      // Work out the hashed gradient indices of the three simplex corners\n      i &= 255;\n      j &= 255;\n      var gi0 = gradP[i + perm[j]];\n      var gi1 = gradP[i + i1 + perm[j + j1]];\n      var gi2 = gradP[i + 1 + perm[j + 1]];\n      // Calculate the contribution from the three corners\n      var t0 = 0.5 - x0 * x0 - y0 * y0;\n      if (t0 < 0) {\n        n0 = 0;\n      } else {\n        t0 *= t0;\n        n0 = t0 * t0 * gi0.dot2(x0, y0); // (x,y) of grad3 used for 2D gradient\n      }\n      var t1 = 0.5 - x1 * x1 - y1 * y1;\n      if (t1 < 0) {\n        n1 = 0;\n      } else {\n        t1 *= t1;\n        n1 = t1 * t1 * gi1.dot2(x1, y1);\n      }\n      var t2 = 0.5 - x2 * x2 - y2 * y2;\n      if (t2 < 0) {\n        n2 = 0;\n      } else {\n        t2 *= t2;\n        n2 = t2 * t2 * gi2.dot2(x2, y2);\n      }\n      // Add contributions from each corner to get the final noise value.\n      // The result is scaled to return values in the interval [-1,1].\n      return 70 * (n0 + n1 + n2);\n    };\n  \n    // 3D simplex noise\n    module.simplex3 = function(xin, yin, zin) {\n      var n0, n1, n2, n3; // Noise contributions from the four corners\n  \n      // Skew the input space to determine which simplex cell we're in\n      var s = (xin + yin + zin) * F3; // Hairy factor for 2D\n      var i = Math.floor(xin + s);\n      var j = Math.floor(yin + s);\n      var k = Math.floor(zin + s);\n  \n      var t = (i + j + k) * G3;\n      var x0 = xin - i + t; // The x,y distances from the cell origin, unskewed.\n      var y0 = yin - j + t;\n      var z0 = zin - k + t;\n  \n      // For the 3D case, the simplex shape is a slightly irregular tetrahedron.\n      // Determine which simplex we are in.\n      var i1, j1, k1; // Offsets for second corner of simplex in (i,j,k) coords\n      var i2, j2, k2; // Offsets for third corner of simplex in (i,j,k) coords\n      if (x0 >= y0) {\n        if (y0 >= z0) {\n          i1 = 1;\n          j1 = 0;\n          k1 = 0;\n          i2 = 1;\n          j2 = 1;\n          k2 = 0;\n        } else if (x0 >= z0) {\n          i1 = 1;\n          j1 = 0;\n          k1 = 0;\n          i2 = 1;\n          j2 = 0;\n          k2 = 1;\n        } else {\n          i1 = 0;\n          j1 = 0;\n          k1 = 1;\n          i2 = 1;\n          j2 = 0;\n          k2 = 1;\n        }\n      } else {\n        if (y0 < z0) {\n          i1 = 0;\n          j1 = 0;\n          k1 = 1;\n          i2 = 0;\n          j2 = 1;\n          k2 = 1;\n        } else if (x0 < z0) {\n          i1 = 0;\n          j1 = 1;\n          k1 = 0;\n          i2 = 0;\n          j2 = 1;\n          k2 = 1;\n        } else {\n          i1 = 0;\n          j1 = 1;\n          k1 = 0;\n          i2 = 1;\n          j2 = 1;\n          k2 = 0;\n        }\n      }\n      // A step of (1,0,0) in (i,j,k) means a step of (1-c,-c,-c) in (x,y,z),\n      // a step of (0,1,0) in (i,j,k) means a step of (-c,1-c,-c) in (x,y,z), and\n      // a step of (0,0,1) in (i,j,k) means a step of (-c,-c,1-c) in (x,y,z), where\n      // c = 1/6.\n      var x1 = x0 - i1 + G3; // Offsets for second corner\n      var y1 = y0 - j1 + G3;\n      var z1 = z0 - k1 + G3;\n  \n      var x2 = x0 - i2 + 2 * G3; // Offsets for third corner\n      var y2 = y0 - j2 + 2 * G3;\n      var z2 = z0 - k2 + 2 * G3;\n  \n      var x3 = x0 - 1 + 3 * G3; // Offsets for fourth corner\n      var y3 = y0 - 1 + 3 * G3;\n      var z3 = z0 - 1 + 3 * G3;\n  \n      // Work out the hashed gradient indices of the four simplex corners\n      i &= 255;\n      j &= 255;\n      k &= 255;\n      var gi0 = gradP[i + perm[j + perm[k]]];\n      var gi1 = gradP[i + i1 + perm[j + j1 + perm[k + k1]]];\n      var gi2 = gradP[i + i2 + perm[j + j2 + perm[k + k2]]];\n      var gi3 = gradP[i + 1 + perm[j + 1 + perm[k + 1]]];\n  \n      // Calculate the contribution from the four corners\n      var t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0;\n      if (t0 < 0) {\n        n0 = 0;\n      } else {\n        t0 *= t0;\n        n0 = t0 * t0 * gi0.dot3(x0, y0, z0); // (x,y) of grad3 used for 2D gradient\n      }\n      var t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1;\n      if (t1 < 0) {\n        n1 = 0;\n      } else {\n        t1 *= t1;\n        n1 = t1 * t1 * gi1.dot3(x1, y1, z1);\n      }\n      var t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2;\n      if (t2 < 0) {\n        n2 = 0;\n      } else {\n        t2 *= t2;\n        n2 = t2 * t2 * gi2.dot3(x2, y2, z2);\n      }\n      var t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3;\n      if (t3 < 0) {\n        n3 = 0;\n      } else {\n        t3 *= t3;\n        n3 = t3 * t3 * gi3.dot3(x3, y3, z3);\n      }\n      // Add contributions from each corner to get the final noise value.\n      // The result is scaled to return values in the interval [-1,1].\n      return 32 * (n0 + n1 + n2 + n3);\n    };\n  \n    // ##### Perlin noise stuff\n  \n    function fade(t) {\n      return t * t * t * (t * (t * 6 - 15) + 10);\n    }\n  \n    function lerp(a, b, t) {\n      return (1 - t) * a + t * b;\n    }\n  \n    // 2D Perlin Noise\n    module.perlin2 = function(x, y) {\n      // Find unit grid cell containing point\n      var X = Math.floor(x),\n        Y = Math.floor(y);\n      // Get relative xy coordinates of point within that cell\n      x = x - X;\n      y = y - Y;\n      // Wrap the integer cells at 255 (smaller integer period can be introduced here)\n      X = X & 255;\n      Y = Y & 255;\n  \n      // Calculate noise contributions from each of the four corners\n      var n00 = gradP[X + perm[Y]].dot2(x, y);\n      var n01 = gradP[X + perm[Y + 1]].dot2(x, y - 1);\n      var n10 = gradP[X + 1 + perm[Y]].dot2(x - 1, y);\n      var n11 = gradP[X + 1 + perm[Y + 1]].dot2(x - 1, y - 1);\n  \n      // Compute the fade curve value for x\n      var u = fade(x);\n  \n      // Interpolate the four results\n      return lerp(lerp(n00, n10, u), lerp(n01, n11, u), fade(y));\n    };\n  \n    // 3D Perlin Noise\n    module.perlin3 = function(x, y, z) {\n      // Find unit grid cell containing point\n      var X = Math.floor(x),\n        Y = Math.floor(y),\n        Z = Math.floor(z);\n      // Get relative xyz coordinates of point within that cell\n      x = x - X;\n      y = y - Y;\n      z = z - Z;\n      // Wrap the integer cells at 255 (smaller integer period can be introduced here)\n      X = X & 255;\n      Y = Y & 255;\n      Z = Z & 255;\n  \n      // Calculate noise contributions from each of the eight corners\n      var n000 = gradP[X + perm[Y + perm[Z]]].dot3(x, y, z);\n      var n001 = gradP[X + perm[Y + perm[Z + 1]]].dot3(x, y, z - 1);\n      var n010 = gradP[X + perm[Y + 1 + perm[Z]]].dot3(x, y - 1, z);\n      var n011 = gradP[X + perm[Y + 1 + perm[Z + 1]]].dot3(x, y - 1, z - 1);\n      var n100 = gradP[X + 1 + perm[Y + perm[Z]]].dot3(x - 1, y, z);\n      var n101 = gradP[X + 1 + perm[Y + perm[Z + 1]]].dot3(x - 1, y, z - 1);\n      var n110 = gradP[X + 1 + perm[Y + 1 + perm[Z]]].dot3(x - 1, y - 1, z);\n      var n111 = gradP[X + 1 + perm[Y + 1 + perm[Z + 1]]].dot3(\n        x - 1,\n        y - 1,\n        z - 1\n      );\n  \n      // Compute the fade curve value for x, y, z\n      var u = fade(x);\n      var v = fade(y);\n      var w = fade(z);\n  \n      // Interpolate\n      return lerp(\n        lerp(lerp(n000, n100, u), lerp(n001, n101, u), w),\n        lerp(lerp(n010, n110, u), lerp(n011, n111, u), w),\n        v\n      );\n    };\n  })(this);\n  "],"sourceRoot":""}